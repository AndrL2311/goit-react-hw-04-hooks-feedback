{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Notification/Notification.module.css","components/Section/Section.module.css","App.module.css","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","App.js","index.js"],"names":["module","exports","Statistics","good","neutral","bad","total","positivePercentage","className","s","statistics","label","value","Notification","message","FeedbackOptions","options","onLeaveFeedback","controls","map","option","button","type","onClick","Section","title","children","App","useState","setGood","setNeutral","setBad","countTotalFeedback","container","name","state","PositiveFeedback","Math","round","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d90350a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"Statistics_statistics__2QFok\",\"label\":\"Statistics_label__227YU\",\"value\":\"Statistics_value__2eXJD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"FeedbackOptions_controls__1Zk6z\",\"button\":\"FeedbackOptions_button__3n-hy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__eciZi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__2S6oE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","import PropTypes from 'prop-types';\nimport s from './Statistics.module.css';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <ul className={s.statistics}>\n      <li className=\"item\">\n        <span className={s.label}>Good:</span>\n        <span className={s.value}>{good}</span>\n      </li>\n      <li className=\"item\">\n        <span className={s.label}>Neutral:</span>\n        <span className={s.value}>{neutral}</span>\n      </li>\n      <li className=\"item\">\n        <span className={s.label}>Bad:</span>\n        <span className={s.value}>{bad}</span>\n      </li>\n      <li className=\"item\">\n        <span className={s.label}>Total:</span>\n        <span className={s.value}>{total}</span>\n      </li>\n      <li className=\"item\">\n        <span className={s.label}>Positive Feedback:</span>\n        <span className={s.value}>{positivePercentage}%</span>\n      </li>\n    </ul>\n  );\n}\n\nStatistics.propTypes = {\n  message: PropTypes.number,\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\nimport s from './Notification.module.css';\n\nfunction Notification({ message }) {\n  return <p className={s.message}> {message} </p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <div className={s.controls}>\n      {options.map(option => (\n        <button\n          className={s.button}\n          key={option}\n          type=\"button\"\n          onClick={() => onLeaveFeedback(option)}\n        >\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <section>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.object.isRequired,\n};\n\nexport default Section;\n","import { useState } from 'react';\nimport Statistics from './components/Statistics/Statistics';\nimport Notification from './components/Notification/Notification';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Section from './components/Section/Section';\nimport s from './App.module.css';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const options = ['good', 'neutral', 'bad'];\n\n  const onLeaveFeedback = name => {\n    if (name === 'good') return setGood(state => state + 1);\n    if (name === 'neutral') return setNeutral(state => state + 1);\n    if (name === 'bad') return setBad(state => state + 1);\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const PositiveFeedback = Math.round((good * 100) / countTotalFeedback());\n    return PositiveFeedback > 0 ? PositiveFeedback : 0;\n  };\n\n  return (\n    <div className={s.container}>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={options} onLeaveFeedback={onLeaveFeedback} />\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotalFeedback() > 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback is given\" />\n        )}\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n// ============================================\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}